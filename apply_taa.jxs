<jittershader name="default">
	<description>Default Slab </description>
	<param name="colTex" type="int" default="0" />
	<param name="norDepthTex" type="int" default="1" />
	<param name="velTex" type="int" default="2" />
	<param name="prevColTex" type="int" default="3" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="CONTEXT_FRAME" />
	<language name="glsl" version="1.5">
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="prevColTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
} jit_out;

uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>
</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	smooth vec2 uv;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform sampler2DRect colTex, norDepthTex, velTex, prevColTex;
uniform vec2 texDim;
uniform int frame;

bool valid_reprojection(vec2 prevUV){
	return 	(prevUV.x >= 0) && 
			(prevUV.y >= 0) && 
			(prevUV.x < texDim.x) && 
			(prevUV.y < texDim.y);
}

vec3 saturate(vec3 x){ return clamp(x, vec3(0.0), vec3(1.0)); }
float saturate(float x){ return clamp(x, 0.0, 1.0); }

// https://software.intel.com/en-us/node/503873
vec3 RGB_YCoCg(vec3 c)
{
	// Y = R/4 + G/2 + B/4
	// Co = R/2 - B/2
	// Cg = -R/4 + G/2 - B/4
	
	float cx_25 = c.x*0.25;
	float cy_5 = c.y*0.5;
	float cz_25 = c.z*0.25;

	return vec3(
		 cx_25 + cy_5 + cz_25,
		 (c.x - c.z) * 0.5,
		-cx_25 + cy_5 - cz_25
	);
}

// https://software.intel.com/en-us/node/503873
vec3 YCoCg_RGB(vec3 c)
{
	// R = Y + Co - Cg
	// G = Y + Cg
	// B = Y - Co - Cg
	float cy_min_cz = c.y - c.z;

	return saturate(vec3(
		c.x + cy_min_cz,
		c.x + c.z,
		c.x - cy_min_cz
	));
}

vec4 sample_color(sampler2DRect tex, vec2 uv){

	vec4 c = texture(tex, uv);
	return vec4(RGB_YCoCg(c.rgb), c.a);
}

vec4 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec4 p, vec4 q){

	// note: only clips towards aabb center (but fast!)
	vec3 p_clip = 0.5 * (aabb_max + aabb_min);
	vec3 e_clip = 0.5 * (aabb_max - aabb_min) + 0.00000001f;

	vec4 v_clip = q - vec4(p_clip, p.w);
	vec3 v_unit = v_clip.xyz / e_clip;
	vec3 a_unit = abs(v_unit);
	float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

	if (ma_unit > 1.0)
		return vec4(p_clip, p.w) + v_clip / ma_unit;
	else
		return q;// point inside aabb
}

vec2 getJitter(){

	vec2 halton[16] = vec2[] 	(	
    								vec2(0.5, 0.3333333333333333),
    								vec2(0.25, 0.6666666666666666),
    								vec2(0.75, 0.1111111111111111),
    								vec2(0.125, 0.4444444444444444),
    								vec2(0.625, 0.7777777777777778),
    								vec2(0.375, 0.2222222222222222),
    								vec2(0.875, 0.5555555555555556),
    								vec2(0.0625, 0.8888888888888888),
    								vec2(0.5625, 0.0370370370370370),
    								vec2(0.3125, 0.3703703703703704),
    								vec2(0.8125, 0.7037037037037037),
    								vec2(0.1875, 0.1481481481481481),
    								vec2(0.6875, 0.4814814814814815),
    								vec2(0.4375, 0.8148148148148148),
    								vec2(0.9375, 0.2592592592592593),
    								vec2(0.03125, 0.5925925925925926)
								);

	return ((halton[frame%16] - vec2(0.5)) / texDim) * 2;
}

vec4 resolve_color(vec4 c){

	return vec4(YCoCg_RGB(c.rgb).rgb, c.a);
}

vec2 sample_velocity_dilated(sampler2DRect tex, vec2 uv, int support)
{
	vec2 du = vec2(1.0, 0.0);
	vec2 dv = vec2(0.0, 1.0);
	vec2 mv = vec2(0.0);
	float rmv = 0.0;

	int end = support + 1;
	for (int i = -support; i != end; i++)
	{
		for (int j = -support; j != end; j++)
		{
			vec2 v = texture(tex, uv + i * dv + j * du).xy;
			float rv = dot(v, v);
			if (rv > rmv)
			{
				mv = v;
				rmv = rv;
			}
		}
	}

	return mv;
}

vec3 find_closest_fragment_3x3(vec2 uv)
{

	vec3 dtl = vec3(-1, -1, texture(norDepthTex, uv + vec2(-1,-1)).w);
	vec3 dtc = vec3( 0, -1, texture(norDepthTex, uv + vec2(0,-1)).w);
	vec3 dtr = vec3( 1, -1, texture(norDepthTex, uv + vec2(1,-1)).w);

	vec3 dml = vec3(-1, 0, texture(norDepthTex, uv + vec2(-1,0)).w);
	vec3 dmc = vec3( 0, 0, texture(norDepthTex, uv).w);
	vec3 dmr = vec3( 1, 0, texture(norDepthTex, uv + vec2(1,0)).w);

	vec3 dbl = vec3(-1, 1, texture(norDepthTex, uv + vec2(-1,1)).w);
	vec3 dbc = vec3( 0, 1, texture(norDepthTex, uv + vec2(0,1)).w);
	vec3 dbr = vec3( 1, 1, texture(norDepthTex, uv + vec2(1,1)).w);

	vec3 dmin = dtl;
	if (dmin.z > dtc.z) dmin = dtc;
	if (dmin.z > dtr.z) dmin = dtr;

	if (dmin.z > dml.z) dmin = dml;
	if (dmin.z > dmc.z) dmin = dmc;
	if (dmin.z > dmr.z) dmin = dmr;

	if (dmin.z > dbl.z) dmin = dbl;
	if (dmin.z > dbc.z) dmin = dbc;
	if (dmin.z > dbr.z) dmin = dbr;

	return vec3(uv + dmin.xy, dmin.z);
}

void main(void) {

	vec3 closest_frag = find_closest_fragment_3x3(jit_in.uv);
	vec2 vel = texelFetch(velTex, ivec2(closest_frag.xy)).xy;

	vec2 unjitt_uv = jit_in.uv - getJitter();
	vec4 curr_col = sample_color(colTex, unjitt_uv);

	//float vel_length = length(vel);
	vec2 prevUV = jit_in.uv - vel*texDim;

	vec4 prev_col = valid_reprojection(prevUV) ? sample_color(prevColTex, prevUV) : curr_col;

	vec4 ctl = sample_color(colTex, unjitt_uv + vec2(-1,-1));
	vec4 ctc = sample_color(colTex, unjitt_uv + vec2(0,-1));
	vec4 ctr = sample_color(colTex, unjitt_uv + vec2(1,-1));
	vec4 cml = sample_color(colTex, unjitt_uv + vec2(-1,0));
	vec4 cmc = sample_color(colTex, unjitt_uv);
	vec4 cmr = sample_color(colTex, unjitt_uv + vec2(1,0));
	vec4 cbl = sample_color(colTex, unjitt_uv + vec2(-1,1));
	vec4 cbc = sample_color(colTex, unjitt_uv + vec2(0,1));
	vec4 cbr = sample_color(colTex, unjitt_uv + vec2(1,1));

	vec4 cmin = min(ctl, min(ctc, min(ctr, min(cml, min(cmc, min(cmr, min(cbl, min(cbc, cbr))))))));
	vec4 cmax = max(ctl, max(ctc, max(ctr, max(cml, max(cmc, max(cmr, max(cbl, max(cbc, cbr))))))));
	vec4 cavg = (ctl + ctc + ctr + cml + cmc + cmr + cbl + cbc + cbr) * 0.111111111111111111111111;

/*
	const float _SubpixelThreshold = 0.5;
	const float _GatherBase = 0.5;
	const float _GatherSubpixelMotion = 0.1666;

	float texel_vel_mag = vel_length * closest_frag.z;
	float k_subpixel_motion = saturate(_SubpixelThreshold / (0.0000001 + texel_vel_mag));
	float k_min_max_support = _GatherBase + _GatherSubpixelMotion * k_subpixel_motion;

	vec2 ss_offset01 = k_min_max_support * vec2(-1, 1);
	vec2 ss_offset11 = k_min_max_support * vec2(1, 1);
	vec4 c00 = sample_color(colTex, unjitt_uv - ss_offset11);
	vec4 c10 = sample_color(colTex, unjitt_uv - ss_offset01);
	vec4 c01 = sample_color(colTex, unjitt_uv + ss_offset01);
	vec4 c11 = sample_color(colTex, unjitt_uv + ss_offset11);

	vec4 cmin = min(c00, min(c10, min(c01, c11)));
	vec4 cmax = max(c00, max(c10, max(c01, c11)));

	vec4 cavg = (c00 + c10 + c01 + c11) * 0.25;
*/

	vec2 chroma_extent = vec2(0.125 * (cmax.r - cmin.r));
	vec2 chroma_center = curr_col.gb;
	cmin.yz = chroma_center - chroma_extent;
	cmax.yz = chroma_center + chroma_extent;
	cavg.yz = chroma_center;

	prev_col = clip_aabb(cmin.xyz, cmax.xyz, clamp(cavg, cmin, cmax), prev_col);

	float lum0 = curr_col.r;
	float lum1 = prev_col.r;

	float unbiased_diff = abs(lum0 - lum1) / max(lum0, max(lum1, 0.2));
	float unbiased_weight = 1.0 - unbiased_diff;
	float unbiased_weight_sqr = unbiased_weight * unbiased_weight;
	float k_feedback = mix(0.9, 1, unbiased_weight_sqr);

	// output
	outColor = mix(curr_col, prev_col, k_feedback);
	outColor = resolve_color(outColor);
	
}
]]>
</program>
</language>
</jittershader>
